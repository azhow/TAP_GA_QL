
To run an experiment you must:
1) Initialize an experiment instance setting up the network, k 
and group size
ex = Experiment(k,networkFile, capacitiesFile, odFile, groupSize, printLinkCosts=False, printDriversPerLink=False)

2) run the respective function for the desired experiment:
in case of ql:
ex.run_ql(numEpisodes,alpha, decay)

in case of ga+ql or ga only:
ex.run_ga_ql(useQL,generations, population, crossover, mutation, elite, alpha,decay) 
if not using ql experiment, you can input any value in alpha and decay

######################################################################################

runExperiment.py is a script for executing one or more experiments in parallel.

It has the function call() that encapsulates the functions above. You may have to change it
or its parameters to suit your needs.

to parallelize the execution, a parallel map is used. A list of parameters must, then, be generated

the execution begins with the line
pool.map(call, args)
where args is a list of inputs


########################################################################################
example of experiment:
Run GA+QL with:
ks = 2,3,4
decay = 0.95,0.99
generations = 500
alpha = 0.5
elite = 5
mutation = 0.001
crossover = 0.2
population size = 100
---------------------------------------------------------------------------------

##notice how there is a single parameter and it is a tuple
def call((decay,k)):
    ##seting fixed parameters
    generations = 500
    alpha = 0.5
    elite = 5
    mutation = 0.001
    crossover = 0.2
    population = 100
    ex = Experiment(k,"networks/siouxfalls.kspnet.txt",\
	    "networks/siouxfalls.capacity.txt", \
	    "networks/od_sioux_falls_alfa.txt", 100, \
	    printLinkCosts=False, printDriversPerLink=True)
    run_ga_ql(useQL,generations,population,crossover,elite_size,alpha,decay)

    
#generating arguments

args = []
for decay in decays:
    for k in  ks:
         args.append( (decay, k) )

from multithreading import Pool
#executing
pool = Pool()
pool.map(call,args)